import { createMock } from 'ts-auto-mock';
import { method, On } from 'ts-auto-mock/extension';
import { I{{pascalCase name}}Repository } from '@/{{dashCase name}}/application/repos';
import { Get{{pascalCase name}}ByIdUseCase as UseCase } from '@/{{dashCase name}}/application/usecases';
import { {{pascalCase name}}Factory } from '@/tests/{{dashCase name}}/factories';

const mockRepository = () => {
  const {{camelCase name}}Repository: I{{pascalCase name}}Repository = createMock<I{{pascalCase name}}Repository>();
  const get{{pascalCase name}}ByIdRepositorySpy: jest.Mock = On({{camelCase name}}Repository).get(
    method((mock) => mock.getById),
  );

  return {
    {{camelCase name}}Repository,
    get{{pascalCase name}}ByIdRepositorySpy,
  };
};

const makeSut = () => {
  const { {{camelCase name}}Repository, get{{pascalCase name}}ByIdRepositorySpy } = mockRepository();

  const sut = new UseCase({{camelCase name}}Repository);

  return {
    sut,
    get{{pascalCase name}}ByIdRepositorySpy,
  };
};

describe('Create {{pascalCase name}} Service', () => {
  beforeEach(() => jest.clearAllMocks());

  describe('With valid parameters', () => {
    it('Should get {{camelCase name}} by id successfully', async () => {
      const { sut, get{{pascalCase name}}ByIdRepositorySpy } = makeSut();

      const {{camelCase name}} = await {{pascalCase name}}Factory.create();

      get{{pascalCase name}}ByIdRepositorySpy.mockResolvedValue({{camelCase name}});

      const {{camelCase name}}Found = await sut.perform({{camelCase name}}.id);

      expect({{camelCase name}}Found).toBeDefined();
      expect(get{{pascalCase name}}ByIdRepositorySpy).toBeCalled();
    });
  });
});
