import { createMock } from 'ts-auto-mock';
import { method, On } from 'ts-auto-mock/extension';
import { I{{pascalCase name}}Repository } from '@/{{dashCase name}}/application/repos';
import { {{pascalCase name}}NotFoundException } from '@/{{dashCase name}}/application/exceptions';
import { Update{{pascalCase name}}UseCase as UseCase } from '@/{{dashCase name}}/application/usecases';
import { {{pascalCase name}}Factory } from '@/tests/{{dashCase name}}/factories';

const mockRepository = () => {
  const {{camelCase name}}Repository: I{{pascalCase name}}Repository = createMock<I{{pascalCase name}}Repository>();
  const get{{pascalCase name}}ByIdRepositorySpy: jest.Mock = On({{camelCase name}}Repository).get(
    method((mock) => mock.getById),
  );
  const update{{pascalCase name}}RepositorySpy: jest.Mock = On({{camelCase name}}Repository).get(
    method((mock) => mock.update),
  );

  return {
    {{camelCase name}}Repository,
    get{{pascalCase name}}ByIdRepositorySpy,
    update{{pascalCase name}}RepositorySpy,
  };
};

const makeSut = () => {
  const { {{camelCase name}}Repository, get{{pascalCase name}}ByIdRepositorySpy, update{{pascalCase name}}RepositorySpy } =
    mockRepository();

  const sut = new UseCase({{camelCase name}}Repository);

  return {
    sut,
    get{{pascalCase name}}ByIdRepositorySpy,
    update{{pascalCase name}}RepositorySpy,
  };
};

describe('Create {{pascalCase name}} Service', () => {
  beforeEach(() => jest.clearAllMocks());

  describe('With valid parameters', () => {
    it('Should get {{camelCase name}} by id successfully', async () => {
      const { sut, get{{pascalCase name}}ByIdRepositorySpy, update{{pascalCase name}}RepositorySpy } =
        makeSut();

      const {{camelCase name}} = await {{pascalCase name}}Factory.create();

      get{{pascalCase name}}ByIdRepositorySpy.mockResolvedValue({{camelCase name}});

      const {{camelCase name}}Updated = await sut.perform({{camelCase name}});

      expect({{camelCase name}}Updated).toBeDefined();
      expect(get{{pascalCase name}}ByIdRepositorySpy).toBeCalled();
      expect(update{{pascalCase name}}RepositorySpy).toBeCalled();
    });
  });

  describe('With invalid parameters', () => {
    it('Should not update if {{camelCase name}} not found', async () => {
      const { sut, get{{pascalCase name}}ByIdRepositorySpy, update{{pascalCase name}}RepositorySpy } =
        makeSut();

      const {{camelCase name}} = await {{pascalCase name}}Factory.create();

      get{{pascalCase name}}ByIdRepositorySpy.mockResolvedValueOnce(null);

      const testScript = () => sut.perform({{camelCase name}});

      await expect(testScript).rejects.toThrow({{pascalCase name}}NotFoundException);

      expect(get{{pascalCase name}}ByIdRepositorySpy).toBeCalled();
      expect(update{{pascalCase name}}RepositorySpy).not.toBeCalled();
    });
  });
});
