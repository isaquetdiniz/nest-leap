import { Order, Pagination, TPaginationResponse } from '@/core/domain';
import { IUseCase } from '@/core/application';
import { {{pascalCase name}} } from '@/{{dashCase name}}/domain';
import { I{{pascalCase name}}Repository, {{pascalCase name}}Filters } from '@/{{dashCase name}}/application/repos';

type Get{{pascalCase name}}sPaginatedByFilterParams = {
  filters: {{pascalCase name}}Filters;
  order: Order;
  pagination: Pagination;
};

export class Get{{pascalCase name}}sByFilterUseCase
  implements IUseCase<Get{{pascalCase name}}sPaginatedByFilterParams, TPaginationResponse<{{pascalCase name}}>>
{
  constructor(private readonly {{camelCase name}}Repository: I{{pascalCase name}}Repository) {}

  async perform(
    params: Get{{pascalCase name}}sPaginatedByFilterParams,
  ): Promise<TPaginationResponse<{{pascalCase name}}>> {
    const total{{pascalCase name}}s = await this.{{camelCase name}}Repository.count(params.filters);

    const {{camelCase name}}s = await this.{{camelCase name}}Repository.getByFilter(
      params.filters,
      params.order,
      params.pagination,
    );

    return {
      data: {{camelCase name}}s,
      totalItemsListed: {{camelCase name}}s.length,
      totalItems: total{{pascalCase name}}s,
    };
  }
}
