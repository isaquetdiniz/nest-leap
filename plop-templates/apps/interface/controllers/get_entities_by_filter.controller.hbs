import {
  I{{pascalCase name}}Repository,
  {{pascalCase name}}Filters,
} from '@/{{dashCase name}}/application/repos';
import { Get{{pascalCase name}}sByFilterUsecase } from '@/{{dashCase name}}/application/usecases';
import { {{pascalCase name}} } from '@/{{dashCase name}}/domain';
import {
  DefaultFiltersEntity,
  DefaultFiltersRequest,
  PaginationResponse,
  TPaginationResponse,
} from '@/core/domain';
import { IController } from '@/core/interface';
import { IsDate, IsOptional, IsUUID, IsAlpha } from 'class-validator';
import { AutoValidator } from '@/libs/class-validator';

export type TGet{{pascalCase name}}sByFilterRequest = {{pascalCase name}}Filters;
export type TGet{{pascalCase name}}ByFilterResponseItem = {{pascalCase name}};
export type TGet{{pascalCase name}}sByFilterResponse =
  TPaginationResponse<TGet{{pascalCase name}}ByFilterResponseItem>;

export class Get{{pascalCase name}}sByFilterRequest
  extends DefaultFiltersRequest
  implements TGet{{pascalCase name}}sByFilterRequest
{
  @IsOptional()
  @IsAlpha()
  name?: string;

  constructor(props: TGet{{pascalCase name}}sByFilterRequest) {
    super(props);
  }
}

export class Get{{pascalCase name}}ByFilterResponseItem
  extends AutoValidator
  implements TGet{{pascalCase name}}ByFilterResponseItem
{
  @IsUUID(4)
  id: string;

  @IsAlpha()
  name: {{pascalCase name}}['name'];

  @IsOptional()
  @IsDate()
  createdAt: Date;

  @IsOptional()
  @IsDate()
  updatedAt: Date;

  @IsOptional()
  @IsDate()
  deletedAt: Date;

  constructor(props: TGet{{pascalCase name}}ByFilterResponseItem) {
    super(props);
  }
}

export class Get{{pascalCase name}}sByFilterResponse extends PaginationResponse<TGet{{pascalCase name}}ByFilterResponseItem> {}

export class Get{{pascalCase name}}sByFilterController
  implements
    IController<
      TGet{{pascalCase name}}sByFilterRequest,
      TGet{{pascalCase name}}sByFilterResponse
    >
{
  private usecase: Get{{pascalCase name}}sByFilterUsecase;

  constructor({{camelCase name}}Repository: I{{pascalCase name}}Repository) {
    this.usecase = new Get{{pascalCase name}}sByFilterUsecase(
      {{camelCase name}}Repository,
    );
  }

  async execute(
    request: TGet{{pascalCase name}}sByFilterRequest,
  ): Promise<TGet{{pascalCase name}}sByFilterResponse> {
    const {
      take,
      skip,
      orderByMode,
      orderByProperty,
      createdAtStart,
      createdAtEnd,
      updatedAtStart,
      updatedAtEnd,
      ...restFilters
    } = request;

    const defaultFilters = new DefaultFiltersEntity({
      take,
      skip,
      orderByMode,
      orderByProperty,
      createdAtStart,
      createdAtEnd,
      updatedAtStart,
      updatedAtEnd,
    });

    const { {{camelCase name}}s, total{{pascalCase name}}s } =
      await this.usecase.perform({
        ...restFilters,
        ...defaultFilters,
      });

    return new Get{{pascalCase name}}sByFilterResponse({
      data: {{camelCase name}}s.map(({{camelCase name}}) => ({
        id: {{camelCase name}}.id,
        name: {{camelCase name}}.name,
        createdAt: {{camelCase name}}.createdAt,
        updatedAt: {{camelCase name}}.updatedAt,
        deletedAt: {{camelCase name}}.deletedAt,
      })),
      totalItems: total{{pascalCase name}}s,
      totalItemsListed: {{camelCase name}}s.length,
    });
  }
}
