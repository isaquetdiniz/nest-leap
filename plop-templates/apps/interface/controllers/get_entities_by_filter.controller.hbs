import { IsDate, IsOptional, IsUUID, IsAlpha } from 'class-validator';
import { {{pascalCase name}} } from '@/{{dashCase name}}/domain';
import { Get{{pascalCase name}}sByFilterUseCase } from '@/{{dashCase name}}/application/usecases';
import { I{{pascalCase name}}Repository, {{pascalCase name}}Filters } from '@/{{dashCase name}}/application/repos';
import {
  DefaultFiltersRequest,
  Order,
  OrderEntity,
  Pagination,
  PaginationEntity,
  PaginationResponse,
  TPaginationResponse,
} from '@/core/domain';
import { IController } from '@/core/interface';
import { AutoValidator } from '@/libs/class-validator';

export type TGet{{pascalCase name}}sByFilterRequest = {{pascalCase name}}Filters & Pagination & Order;
export type TGet{{pascalCase name}}ByFilterResponseItem = {{pascalCase name}};
export type TGet{{pascalCase name}}sByFilterResponse =
  TPaginationResponse<TGet{{pascalCase name}}ByFilterResponseItem>;

export class Get{{pascalCase name}}sByFilterRequest
  extends DefaultFiltersRequest
  implements TGet{{pascalCase name}}sByFilterRequest
{
  @IsOptional()
  @IsAlpha()
  name?: string;

  constructor(props: TGet{{pascalCase name}}sByFilterRequest) {
    super(props);
  }
}

export class Get{{pascalCase name}}ByFilterResponseItem
  extends AutoValidator
  implements TGet{{pascalCase name}}ByFilterResponseItem
{
  @IsUUID(4)
  id: string;

  @IsAlpha()
  name: {{pascalCase name}}['name'];

  @IsOptional()
  @IsDate()
  createdAt: Date;

  @IsOptional()
  @IsDate()
  updatedAt: Date;

  @IsOptional()
  @IsDate()
  deletedAt: Date;

  constructor(props: TGet{{pascalCase name}}ByFilterResponseItem) {
    super(props);
  }
}

export class Get{{pascalCase name}}sByFilterResponse extends PaginationResponse<TGet{{pascalCase name}}ByFilterResponseItem> {}

export class Get{{pascalCase name}}sByFilterController
  implements IController<TGet{{pascalCase name}}sByFilterRequest, TGet{{pascalCase name}}sByFilterResponse>
{
  private usecase: Get{{pascalCase name}}sByFilterUseCase;

  constructor({{camelCase name}}Repository: I{{pascalCase name}}Repository) {
    this.usecase = new Get{{pascalCase name}}sByFilterUseCase({{camelCase name}}Repository);
  }

  async execute(
    request: TGet{{pascalCase name}}sByFilterRequest,
  ): Promise<TGet{{pascalCase name}}sByFilterResponse> {
    const pagination = new PaginationEntity({
      ...(request.take && { take: request.take }),
      ...(request.skip && { skip: request.skip }),
    });

    const order = new OrderEntity({
      ...(request.mode && { mode: request.mode }),
      ...(request.property && { property: request.property }),
    });

    const filters = {
      ...(request.name && { name: request.name }),
    };

    const {{camelCase name}}sPaginated = await this.usecase.perform({
      filters,
      order,
      pagination,
    });

    return new Get{{pascalCase name}}sByFilterResponse({
      data: {{camelCase name}}sPaginated.data.map(({{camelCase name}}) => ({
        id: {{camelCase name}}.id,
        name: {{camelCase name}}.name,
        createdAt: {{camelCase name}}.createdAt,
        updatedAt: {{camelCase name}}.updatedAt,
        deletedAt: {{camelCase name}}.deletedAt,
      })),
      totalItems: {{camelCase name}}sPaginated.totalItems,
      totalItemsListed: {{camelCase name}}sPaginated.totalItemsListed,
    });
  }
}
