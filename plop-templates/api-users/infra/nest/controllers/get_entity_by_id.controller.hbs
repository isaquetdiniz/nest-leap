import {
  Get{{pascalCase name}}ByIdNestService,
} from '@/{{dashCase name}}/infra/nest/services';
import {
  TGet{{pascalCase name}}ByIdRequest,
  Get{{pascalCase name}}ByIdResponse,
} from '@/{{dashCase name}}/interface/controllers';
import { Controller, Get, Param } from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiOkResponse,
  ApiOperation,
  ApiProperty,
  ApiTags,
  ApiUnauthorizedResponse,
  ApiUnprocessableEntityResponse,
} from '@nestjs/swagger';
import { IsUUID } from 'class-validator';

class Get{{pascalCase name}}ByIdRestParams {
  @ApiProperty({
    description: 'The {{pascalCase name}} id.',
    example: '882e725d-d9c5-45b6-b37d-c19834d8c090',
  })
  @IsUUID(4)
  id: string;
}

class Get{{pascalCase name}}ByIdRestResponse {
  @ApiProperty({
    description: '{{pascalCase name}} id.',
    example: '882e725d-d9c5-45b6-b37d-c19834d8c090',
  })
  id: string;

  @ApiProperty({
    description: '{{pascalCase name}} name.',
    example: 'Test',
  })
  name: string;

  @ApiProperty({
    description: '{{pascalCase name}} created at date.',
    example: '1970-01-01T00:00:00.000Z',
  })
  created_at: Date;

  @ApiProperty({
    description: '{{pascalCase name}} updated at date.',
    example: '1970-01-01T00:00:00.000Z',
  })
  updated_at: Date;

  @ApiProperty({
    description: '{{pascalCase name}} deleted at date.',
    example: '1970-01-01T00:00:00.000Z',
  })
  deleted_at: Date;

  constructor(response: Get{{pascalCase name}}ByIdResponse) {
    this.id = response.id;
    this.name = response.name;
    this.created_at = response.createdAt;
    this.updated_at = response.updatedAt;
    this.deleted_at = response.deletedAt;
  }
}

@ApiTags('{{pascalCase name}}')
@Controller('{{dashCase name}}/:id')
export class Get{{pascalCase name}}ByIdRestController {
  constructor(
    private readonly get{{pascalCase name}}ByIdService: Get{{pascalCase name}}ByIdNestService,
  ) {}

  @ApiOperation({
    summary: 'Get a {{camelCase name}}.',
    description: 'Get a {{camelCase name}} using id.',
  })
  @ApiOkResponse({
    description: 'The {{camelCase name}} was returned successfully.',
    type: null,
  })
  @ApiUnauthorizedResponse({
    description: 'User authentication failed.',
  })
  @ApiBadRequestResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @ApiUnprocessableEntityResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @Get()
  async execute(
    @Param() params: Get{{pascalCase name}}ByIdRestParams,
  ): Promise<Get{{pascalCase name}}ByIdRestResponse> {
    const request: TGet{{pascalCase name}}ByIdRequest = {
      id: params.id,
    };

    const result = await this.get{{pascalCase name}}ByIdService.execute(request);

    const response = result && new Get{{pascalCase name}}ByIdRestResponse(result);

    return response;
  }
}
