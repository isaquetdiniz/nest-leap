import { Get{{pascalCase name}}sByFilterNestService } from '@/{{dashCase name}}/infra/nest/services';
import {
  TGet{{pascalCase name}}sByFilterResponse,
  TGet{{pascalCase name}}sByFilterRequest,
} from '@/{{dashCase name}}/interface/controllers';
import { Controller, Get, Query } from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiOkResponse,
  ApiOperation,
  ApiProperty,
  ApiPropertyOptional,
  ApiTags,
  ApiUnauthorizedResponse,
  ApiUnprocessableEntityResponse,
} from '@nestjs/swagger';
import { IsOptional, IsAlpha } from 'class-validator';
import { GetPaginatedOrderByFilterDefaultRestRequest } from '@/core/domain';

class Get{{pascalCase name}}sByFilterRestQuery extends GetPaginatedOrderByFilterDefaultRestRequest {
  @ApiPropertyOptional({
    description: 'The name of the {{pascalCase name}}.',
  })
  @IsOptional()
  @IsAlpha()
  name?: string;
}

class Get{{pascalCase name}}ByFilterRestResponse {
  @ApiProperty({
    description: '{{pascalCase name}} name.',
    example: 'Test',
  })
  name: string;

  constructor(response: TGet{{pascalCase name}}sByFilterRequest) {
    this.name = response.name;
  }
}

class Get{{pascalCase name}}sByFilterRestResponse {
  @ApiProperty({
    description: 'Amount of items remaining in database with filter applied.',
    example: 58,
  })
  total_items: number;

  @ApiProperty({
    description: 'Amount of items returned in response with filter applied.',
    example: 58,
  })
  total_items_listed: number;

  @ApiProperty({
    description: '{{pascalCase name}} instances',
    isArray: true,
    type: Get{{pascalCase name}}ByFilterRestResponse,
  })
  data: Get{{pascalCase name}}ByFilterRestResponse[];

  constructor(response: TGet{{pascalCase name}}sByFilterResponse) {
    this.data = response.data.map(
      (instance) => new Get{{pascalCase name}}ByFilterRestResponse(instance),
    );
    this.total_items = response.totalItems;
    this.total_items_listed = response.totalItemsListed;
  }
}

@ApiTags('{{pascalCase name}}')
@Controller('{{pascalCase name}}')
export class Get{{pascalCase name}}sByFilterRestController {
  constructor(
    private readonly get{{pascalCase name}}sByFilterService: Get{{pascalCase name}}sByFilterNestService,
  ) {}

  @ApiOperation({
    summary: 'Get multiple {{pascalCase name}}s.',
    description: 'Get multiple {{pascalCase name}}s using filters.',
  })
  @ApiOkResponse({
    description: 'The {{pascalCase name}}s were returned successfully.',
    type: Get{{pascalCase name}}sByFilterRestResponse,
  })
  @ApiUnauthorizedResponse({
    description: 'User authentication failed.',
  })
  @ApiBadRequestResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @ApiUnprocessableEntityResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @Get()
  async execute(
    @Query() query: Get{{pascalCase name}}sByFilterRestQuery,
  ): Promise<Get{{pascalCase name}}sByFilterRestResponse> {
    const request: TGet{{pascalCase name}}sByFilterRequest = {
      name: query.name,
      mode: query.mode,
      property: query.property,
      skip: query.skip,
      take: query.take,
    };

    const result = await this.get{{pascalCase name}}sByFilterService.execute(request);

    const response = new Get{{pascalCase name}}sByFilterRestResponse(result);

    return response;
  }
}
