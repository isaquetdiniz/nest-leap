import { Update{{pascalCase name}}NestService } from '@/{{dashCase name}}/infra/nest/services';
import {
  Update{{pascalCase name}}Response,
  TUpdate{{pascalCase name}}Request,
} from '@/{{dashCase name}}/interface/controllers';
import { Body, Controller, Param, Patch } from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiOkResponse,
  ApiOperation,
  ApiProperty,
  ApiPropertyOptional,
  ApiTags,
  ApiUnauthorizedResponse,
  ApiUnprocessableEntityResponse,
} from '@nestjs/swagger';
import { IsOptional, IsUUID, IsAlpha } from 'class-validator';

class Update{{pascalCase name}}RestParams {
  @ApiProperty({
    description: 'The {{pascalCase name}} id.',
    example: '882e725d-d9c5-45b6-b37d-c19834d8c090',
  })
  @IsUUID(4)
  id: string;
}

class Update{{pascalCase name}}RestBody {
  @ApiPropertyOptional({
    description: 'The name of the {{camelCase name}}.',
  })
  @IsOptional()
  @IsAlpha()
  name?: string;
}

class Update{{pascalCase name}}RestResponse {
  @ApiProperty({
    description: '{{pascalCase name}} id.',
    example: '882e725d-d9c5-45b6-b37d-c19834d8c090',
  })
  id: string;

  @ApiProperty({
    description: '{{pascalCase name}} name.',
    example: 'Test',
  })
  name: string;

  @ApiProperty({
    description: '{{pascalCase name}} created at date.',
    example: '1970-01-01T00:00:00.000Z',
  })
  created_at: Date;

  @ApiProperty({
    description: '{{pascalCase name}} updated at date.',
    example: '1970-01-01T00:00:00.000Z',
  })
  updated_at: Date;

  @ApiProperty({
    description: '{{pascalCase name}} deleted at date.',
    example: '1970-01-01T00:00:00.000Z',
  })
  deleted_at: Date;

  constructor(response: Update{{pascalCase name}}Response) {
    this.id = response.id;
    this.name = response.name;
    this.created_at = response.createdAt;
    this.updated_at = response.updatedAt;
    this.deleted_at = response.deletedAt;
  }
}

@ApiTags('{{pascalCase name}}')
@Controller('{{dashCase name}}/:id')
export class Update{{pascalCase name}}RestController {
  constructor(
    private readonly create{{pascalCase name}}Service: Update{{pascalCase name}}NestService,
  ) {}

  @ApiOperation({
    summary: 'Update a {{camelCase name}}.',
    description: 'Update a {{camelCase name}} using score and id.',
  })
  @ApiOkResponse({
    description: 'The {{camelCase name}} was updated successfully.',
    type: Update{{pascalCase name}}RestResponse,
  })
  @ApiUnauthorizedResponse({
    description: 'User authentication failed.',
  })
  @ApiBadRequestResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @ApiUnprocessableEntityResponse({
    description:
      'If any required params are missing or has invalid format or type.',
  })
  @Patch()
  async execute(
    @Body() body: Update{{pascalCase name}}RestBody,
    @Param() params: Update{{pascalCase name}}RestParams,
  ): Promise<Update{{pascalCase name}}RestResponse> {
    const request: TUpdate{{pascalCase name}}Request = {
      id: params.id,
      name: body.name,
    };

    const result = await this.create{{pascalCase name}}Service.execute(request);

    const response = new Update{{pascalCase name}}RestResponse(result);

    return response;
  }
}
