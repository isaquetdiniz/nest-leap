generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  serial             Int                  @default(autoincrement())
  state              String
  name               String
  email              String               @unique
  password           String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  deletedAt          DateTime?            @map("deleted_at")
  emails             Email[]
  confirmations      UserConfirmation[]
  UserForgotPassword UserForgotPassword[]

  @@map("users")
}

model UserConfirmation {
  id          String    @id @default(uuid()) @db.Uuid
  serial      Int       @default(autoincrement())
  state       String
  code        String
  attempts    Int
  email       String
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id") @db.Uuid
  confirmedAt DateTime? @map("confirmed_at")
  expiredAt   DateTime? @map("expired_at")
  declinedAt  DateTime? @map("declined_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("users_confirmations")
}

model UserForgotPassword {
  id          String    @id @default(uuid()) @db.Uuid
  serial      Int       @default(autoincrement())
  state       String
  code        String
  attempts    Int
  email       String
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id") @db.Uuid
  confirmedAt DateTime? @map("confirmed_at")
  expiredAt   DateTime? @map("expired_at")
  declinedAt  DateTime? @map("declined_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("users_forgot_passwords")
}

model EmailTemplate {
  id        String    @id @default(uuid()) @db.Uuid
  serial    Int       @default(autoincrement())
  tag       String    @unique
  markups   String[]
  title     String?
  body      String?
  html      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Email     Email[]

  @@map("emails_templates")
}

model Email {
  id         String        @id @default(uuid()) @db.Uuid
  serial     Int           @default(autoincrement())
  state      String
  template   EmailTemplate @relation(fields: [templateId], references: [id])
  templateId String        @map("template_id") @db.Uuid
  to         String
  from       String
  title      String?
  body       String?
  html       String?
  user       User?         @relation(fields: [userId], references: [id])
  userId     String?       @map("user_id") @db.Uuid
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  deletedAt  DateTime?     @map("deleted_at")

  @@map("emails")
}
