name: CI/CD - Nest - Pipeline
on:
  push:
    branches: [nest]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    #services:
    #  db-test:
    #    image: postgis/postgis:14-3.3-alpine
    #    env:
    #      POSTGRES_DB: test
    #      POSTGRES_USER: test
    #      POSTGRES_PASSWORD: test
    #    ports:
    #      - '5432:5432'

    env:
      NODE_ENV: 'test'

      APP_DATABASE_URL: 'postgres://test:test@localhost:5432/test'

      #Redis
      APP_REDIS_URL: 'redis://@localhost:6379'
      APP_REDIS_PREFIX: 'test'

      #JWT
      APP_JWT_ACCESS_TOKEN_SECRET: 'secret'

      #Users
      APP_CONFIRMATION_EMAIL_SENDER: 'test'
      APP_CONFIRMATION_EMAIL_TAG: 'test'
      APP_CONFIRMATION_MAX_ATTEMPTS: 3
      APP_CONFIRMATION_EXPIRATION_MS: 86400000
      APP_FORGOT_PASSWORD_EMAIL_SENDER:
      APP_FORGOT_PASSWORD_EMAIL_TAG: 'test'
      APP_FORGOT_PASSWORD_MAX_ATTEMPTS: 3
      APP_FORGOT_PASSWORD_EXPIRATION_MS: 900000

      #AWS
      AWS_REGION: 'test'
      AWS_ACCESS_KEY: 'test'
      AWS_ACCESS_SECRET_KEY: 'test'
      AWS_INJECT_ACCESS: 'test'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16.13.0
          cache: 'npm'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Generate prisma
        run: npm run prisma:generate

      - name: Linting
        run: npm run lint:check

      - name: Style
        run: npm run style:check

      - name: Run unit tests
        run: npm run test

  #continuous-deployment:
  #runs-on: ubuntu-latest
  #needs: [continuous-integration]
  #if: github.ref == 'refs/heads/nest'
  #steps:
  # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #  - uses: actions/checkout@v2
  # - name: Configure AWS credentials
  #    uses: aws-actions/configure-aws-credentials@v1
  #   with:
  #    aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
  #    aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
  #    aws-region: ${{ secrets.AWS_ECR_REGION }}

  #- name: Docker authentication
  #  run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 820135014097.dkr.ecr.us-east-1.amazonaws.com

  #- name: Get commmit hash
  #  id: get-hash
  #  run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

  #- name: Build application image
  #  run: docker build -t ${{ github.event.repository.name }}:staging-${{ steps.get-hash.outputs.hash }} -f build/app/Dockerfile .

  #- name: Tag application image
  #  run: docker tag ${{ github.event.repository.name }}:staging-${{ steps.get-hash.outputs.hash }} 820135014097.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.repository.name }}:staging-${{ steps.get-hash.outputs.hash }}

  #- name: Push application image
  #  run: docker push 820135014097.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.repository.name }}:staging-${{ steps.get-hash.outputs.hash }}

  #- name: Push new images to k8s github repository
  #  env:
  #    API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
  #  run: |
  #    git config --global user.name "isaquetdiniz"
  #    git config --global user.email "itd@cin.ufpe.br"

  #    git clone https://isaquetdiniz:$API_GITHUB_TOKEN@github.com/loomi/k8s.git

  #    cd k8s/${{ github.event.repository.name }}-staging

  #    sed -i 's/${{ github.event.repository.name }}:staging-.\+/${{ github.event.repository.name }}:staging-${{ steps.get-hash.outputs.hash }}/g' deployment.yaml
  #    sed -i 's/${{ github.event.repository.name }}:staging-.\+/${{ github.event.repository.name }}:staging-${{ steps.get-hash.outputs.hash }}/g' pre-sync-job.yaml

  #    git add .
  #    git commit -m "feat: update ${{ github.event.repository.name }} staging to ${{ steps.get-hash.outputs.hash }}"
  #    git push origin main
